
import java.io.File;
import java.net.MalformedURLException;
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import java.util.List;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Pierre
 */
public class RMIFileBrowerGUI extends javax.swing.JFrame {

    private FileServer fileServer;
    DefaultListModel model = new DefaultListModel();
    private String currentDirr = "";
    private String currentPath = "";
    private String add = "";
    private int lvl = 0;
    private String toRename = "";

    private String pathLvL1 = "";
    private String pathLvL2 = "";
    private String pathLvL3 = "";

    /* Pattern for current dir*/
    String pattern = "^files.([\\d\\D]+)$"; //files.dir
    Pattern patdir = Pattern.compile(pattern);

    /* Pattern to get back */
    String patback = "^([^\\/]+)\\/(.*)$";
    Pattern patb = Pattern.compile(patback);

    /**
     * Creates new form RMIFileBrowser
     */
    public RMIFileBrowerGUI() {
        initComponents();
        button_add_file.setEnabled(false);
        button_delete.setEnabled(false);
        button_enter.setEnabled(false);
        button_parent.setEnabled(false);
        button_read.setEnabled(false);
        button_renameFile.setEnabled(false);
        button_new.setEnabled(false);
        field_new.setEnabled(false);
        field_currentpath.setEnabled(false);
        field_rename.setEnabled(false);
        button_rename.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        field_servername = new javax.swing.JTextField();
        field_port = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        button_connect = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        field_name = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        list_files = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        display_area = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        button_parent = new javax.swing.JButton();
        button_enter = new javax.swing.JButton();
        button_renameFile = new javax.swing.JButton();
        button_add_file = new javax.swing.JButton();
        button_delete = new javax.swing.JButton();
        button_read = new javax.swing.JButton();
        button_add_directory = new javax.swing.JButton();
        field_new = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        button_new = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        field_currentpath = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        field_rename = new javax.swing.JTextField();
        button_rename = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        field_servername.setText("localhost");

        field_port.setText("1099");

        jLabel1.setText("File Server");

        jLabel2.setText("Port");

        button_connect.setText("Connect");
        button_connect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_connectActionPerformed(evt);
            }
        });

        jLabel3.setText("Type your name");

        jLabel5.setText("jLabel5");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jLabel5)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(field_name, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(field_servername, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(field_port)
                        .addGap(34, 34, 34)
                        .addComponent(button_connect, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(39, 39, 39))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(field_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(field_servername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(field_port, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(button_connect)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {button_connect, field_name, field_port, field_servername});

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        list_files.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                list_filesMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(list_files);

        display_area.setColumns(20);
        display_area.setRows(5);
        jScrollPane2.setViewportView(display_area);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 396, Short.MAX_VALUE)
            .addComponent(jScrollPane2)
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        button_parent.setText("Parent Directory");
        button_parent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_parentActionPerformed(evt);
            }
        });

        button_enter.setText("Enter Directory");
        button_enter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_enterActionPerformed(evt);
            }
        });

        button_renameFile.setText("Rename File");
        button_renameFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_renameFileActionPerformed(evt);
            }
        });

        button_add_file.setText("Add File");
        button_add_file.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_add_fileActionPerformed(evt);
            }
        });

        button_delete.setText("Delete");
        button_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_deleteActionPerformed(evt);
            }
        });

        button_read.setText("Read File");
        button_read.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_readActionPerformed(evt);
            }
        });

        button_add_directory.setText("Add Directory");
        button_add_directory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_add_directoryActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(button_parent)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(button_enter)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(button_read, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(button_add_file)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(button_add_directory)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(button_delete)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(button_renameFile)
                .addGap(21, 21, 21))
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {button_add_file, button_delete, button_enter, button_parent, button_renameFile});

        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(button_parent)
                    .addComponent(button_enter)
                    .addComponent(button_renameFile)
                    .addComponent(button_add_file)
                    .addComponent(button_delete)
                    .addComponent(button_read)
                    .addComponent(button_add_directory))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel4.setText("New file name");

        button_new.setText("Add");
        button_new.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_newActionPerformed(evt);
            }
        });

        jLabel6.setText("Current path :");

        jLabel7.setText("Rename :");

        button_rename.setText("Rename");
        button_rename.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_renameActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(field_new, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(button_new)
                        .addGap(111, 111, 111)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(field_rename, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(button_rename))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(field_currentpath, javax.swing.GroupLayout.PREFERRED_SIZE, 649, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(field_currentpath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(field_new, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(button_new)
                    .addComponent(jLabel7)
                    .addComponent(field_rename, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(button_rename))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {button_new, field_new});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {field_rename, jLabel7});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void button_connectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_connectActionPerformed
        String str = null;
        ArrayList<File> folders = null;
        field_currentpath.setText("files/");
        try {
            fileServer = findFileServer("localhost:1099/FileServer");
            str = fileServer.helloClient(field_name.getText());
        } catch (NotBoundException | MalformedURLException | RemoteException ex) {
            Logger.getLogger(RMIFileBrowerGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        display_area.setText(str);
        try {
            folders = fileServer.getFiles(currentPath);
            for (File folder : folders) {
                model.addElement(folder.toString());
            }
            list_files.setModel(model);

        } catch (RemoteException ex) {
            Logger.getLogger(RMIFileBrowerGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.stop();
        button_add_file.setEnabled(true);

        lvl = 0;
        System.out.println("Level begin = " + lvl);
    }//GEN-LAST:event_button_connectActionPerformed

    private void button_parentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_parentActionPerformed
        model.clear();

        ArrayList<File> strings;
        try {
            switch (lvl) {
                case 1:
                    strings = fileServer.getFiles("");
                    for (File string : strings) {
                        model.addElement(string.toString());
                    }
                    field_currentpath.setText("files/");
                    break;
                case 2:
                    strings = fileServer.getFiles(pathLvL1);
                    for (File string : strings) {
                        model.addElement(string.toString());
                    }
                    field_currentpath.setText("files/"+pathLvL1);
                    break;
                case 3:
                    strings = fileServer.getFiles(pathLvL2);
                    for (File string : strings) {
                        model.addElement(string.toString());
                    }
                    field_currentpath.setText("files/"+pathLvL2);
                    break;
                default:
                    strings = fileServer.getFiles(pathLvL3);
                    for (File string : strings) {
                        model.addElement(string.toString());
                    }
                    field_currentpath.setText("files/"+pathLvL3);
                    break;
            }
        } catch (RemoteException ex) {
            Logger.getLogger(RMIFileBrowerGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        list_files.setModel(model);
        lvl--;
        if (lvl != 0) {
            button_parent.setEnabled(true);
        } else {
            button_parent.setEnabled(false);
        }
        button_renameFile.setEnabled(false);
        button_delete.setEnabled(false);
    }//GEN-LAST:event_button_parentActionPerformed

    private void button_enterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_enterActionPerformed
        currentPath = list_files.getSelectedValue();
        Matcher mm = patdir.matcher(currentPath);
        if (mm.find()) {
            currentDirr = mm.group(1);
            System.out.println("group 1 curr dir selected value = " + currentDirr);
        }
        model.clear();
        System.out.println("Level before = " + lvl);
        try {
            ArrayList<File> strings = fileServer.getFiles(currentDirr);
            Matcher m;
            for (File string : strings) {
                switch (lvl) {
                    case 0:
                        model.addElement(string.toString());
                        pathLvL1 = currentDirr;
                        System.out.println("pathLvL1 = " + pathLvL1);
                        field_currentpath.setText("files/"+pathLvL1);
                        break;
                    case 1:
                        m = patdir.matcher(string.toString());
                        if (m.find()) {
                            model.addElement(string.toString());
                            System.out.println("case 1, group 1 = " + m.group(1));
                        }
                        pathLvL2 = currentDirr;
                        System.out.println("pathLvL2 = " + pathLvL2);
                        field_currentpath.setText("files/"+pathLvL2);
                        break;
                    case 2:
                        m = patdir.matcher(string.toString());
                        if (m.find()) {
                            model.addElement(string.toString());
                            System.out.println("case 2, group 1 = " + m.group(1));
                        }
                        pathLvL3 = currentDirr;
                        System.out.println("pathLvL3 = " + pathLvL3);
                        field_currentpath.setText("files/"+pathLvL3);
                        break;
                    default:
                        m = patdir.matcher(string.toString());
                        if (m.find()) {
                            model.addElement(string.toString());
                        }
                        break;
                }
            }
            list_files.setModel(model);
        } catch (RemoteException ex) {
            Logger.getLogger(RMIFileBrowerGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        lvl++;
        System.out.println("Level after = " + lvl + "\n");
        if (lvl != 0) {
            button_parent.setEnabled(true);
        } else {
            button_parent.setEnabled(false);
        }
        refresh();
        button_renameFile.setEnabled(false);
        button_delete.setEnabled(false);
    }//GEN-LAST:event_button_enterActionPerformed

    private void button_renameFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_renameFileActionPerformed
        field_rename.setEnabled(true);
        button_rename.setEnabled(true);
        toRename = list_files.getSelectedValue();
        stopAddOrRename();
    }//GEN-LAST:event_button_renameFileActionPerformed

    private void button_add_fileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_add_fileActionPerformed
        field_new.setEnabled(true);
        button_new.setEnabled(true);
        add = "file";
        stopAddOrRename();
    }//GEN-LAST:event_button_add_fileActionPerformed

    private void button_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_deleteActionPerformed
        String toDelete = list_files.getSelectedValue();
        try {
            fileServer.deleteFile(toDelete);
            refresh();
        } catch (RemoteException ex) {
            Logger.getLogger(RMIFileBrowerGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_button_deleteActionPerformed

    private void button_readActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_readActionPerformed
        ArrayList<String> str = null;
        String file = list_files.getSelectedValue();
        try {
            str = fileServer.openReadFile(file);
        } catch (RemoteException ex) {
            Logger.getLogger(RMIFileBrowerGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        String mystring = "";
        for (String string : str) {
            mystring = mystring + string + "\n";
        }
        display_area.setText(mystring);
    }//GEN-LAST:event_button_readActionPerformed

    private void button_newActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_newActionPerformed
        if (add.equals("file")) {
            try {
                switch (lvl) {
                    case 0:
                        fileServer.createFile(field_new.getText(), "", false);
                        break;
                    case 1:
                        fileServer.createFile(field_new.getText(), pathLvL1, false);
                        break;
                    case 2:
                        fileServer.createFile(field_new.getText(), pathLvL2, false);
                        break;
                    case 3:
                        fileServer.createFile(field_new.getText(), pathLvL3, false);
                        break;
                    default:
                        break;
                }
            } catch (RemoteException ex) {
                Logger.getLogger(RMIFileBrowerGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            try {
                switch (lvl) {
                    case 0:
                        fileServer.createFile(field_new.getText(), "", true);
                        break;
                    case 1:
                        fileServer.createFile(field_new.getText(), pathLvL1, true);
                        break;
                    case 2:
                        fileServer.createFile(field_new.getText(), pathLvL2, true);
                        break;
                    case 3:
                        fileServer.createFile(field_new.getText(), pathLvL3, true);
                        break;
                    default:
                        break;
                }
            } catch (RemoteException ex) {
                Logger.getLogger(RMIFileBrowerGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        field_new.setEnabled(false);
        button_new.setEnabled(false);
        field_new.setText("");
        setEnabled();
        refresh();
    }//GEN-LAST:event_button_newActionPerformed

    private void button_add_directoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_add_directoryActionPerformed
        field_new.setEnabled(true);
        button_new.setEnabled(true);
        add = "dir";
        stopAddOrRename();
    }//GEN-LAST:event_button_add_directoryActionPerformed

    private void button_renameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_renameActionPerformed
        String str = field_rename.getText();
        if ("".equals(str)) {
            System.out.println("The new name cannot be null");
        } else {
            try {
                fileServer.renameFile(toRename, str);
                refresh();
            } catch (RemoteException ex) {
                Logger.getLogger(RMIFileBrowerGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        setEnabled();
        button_rename.setEnabled(false);
        field_rename.setEnabled(false);
        field_rename.setText("");
    }//GEN-LAST:event_button_renameActionPerformed

    private void list_filesMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_list_filesMousePressed
        String str = list_files.getSelectedValue();
        try {
            if (fileServer.isFile(str)) {
                button_read.setEnabled(true);
                button_enter.setEnabled(false);
            } else {
                button_read.setEnabled(false);
                button_enter.setEnabled(true);
            }
        } catch (RemoteException ex) {
            Logger.getLogger(RMIFileBrowerGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        button_renameFile.setEnabled(true);
        button_delete.setEnabled(true);
    }//GEN-LAST:event_list_filesMousePressed

    private void stop() {
        field_name.setEnabled(false);
        field_port.setEnabled(false);
        field_servername.setEnabled(false);
        button_connect.setEnabled(false);
        button_parent.setEnabled(false);
        button_read.setEnabled(false);
    }

    private void stopAddOrRename() {
        button_add_directory.setEnabled(false);
        button_add_file.setEnabled(false);
        button_delete.setEnabled(false);
        button_enter.setEnabled(false);
        button_parent.setEnabled(false);
        button_read.setEnabled(false);
        button_renameFile.setEnabled(false);
    }

    private void setEnabled() {
        button_add_directory.setEnabled(true);
        button_add_file.setEnabled(true);
        button_delete.setEnabled(true);
        button_enter.setEnabled(false);
        if (lvl != 0) {
            button_parent.setEnabled(true);
        }
        button_read.setEnabled(false);
        button_renameFile.setEnabled(true);
        button_rename.setEnabled(false);
    }

    private void refresh() {
        model.clear();
        try {
            ArrayList<File> strings = fileServer.getFiles(currentDirr);
            Matcher m;
            for (File string : strings) {
                switch (lvl) {
                    case 0:
                        model.addElement(string.toString());
                        break;
                    case 1:
                        m = patdir.matcher(string.toString());
                        if (m.find()) {
                            model.addElement(string.toString());
                            System.out.println("case 1, group 1 = " + m.group(1));
                        }
                        break;
                    case 2:
                        m = patdir.matcher(string.toString());
                        if (m.find()) {
                            model.addElement(string.toString());
                            System.out.println("case 2, group 1 = " + m.group(1));
                        }
                        break;
                    default:
                        m = patdir.matcher(string.toString());
                        if (m.find()) {
                            model.addElement(string.toString());
                        }
                        break;
                }
            }
            list_files.setModel(model);
        } catch (RemoteException ex) {
            Logger.getLogger(RMIFileBrowerGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (lvl != 0) {
            button_parent.setEnabled(true);
        } else {
            button_parent.setEnabled(false);
        }
    }

    private FileServer findFileServer(String service) throws NotBoundException, MalformedURLException, RemoteException {
        return (FileServer) Naming.lookup("rmi://" + service);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RMIFileBrowerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RMIFileBrowerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RMIFileBrowerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RMIFileBrowerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RMIFileBrowerGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button_add_directory;
    private javax.swing.JButton button_add_file;
    private javax.swing.JButton button_connect;
    private javax.swing.JButton button_delete;
    private javax.swing.JButton button_enter;
    private javax.swing.JButton button_new;
    private javax.swing.JButton button_parent;
    private javax.swing.JButton button_read;
    private javax.swing.JButton button_rename;
    private javax.swing.JButton button_renameFile;
    private javax.swing.JTextArea display_area;
    private javax.swing.JTextField field_currentpath;
    private javax.swing.JTextField field_name;
    private javax.swing.JTextField field_new;
    private javax.swing.JTextField field_port;
    private javax.swing.JTextField field_rename;
    private javax.swing.JTextField field_servername;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<String> list_files;
    // End of variables declaration//GEN-END:variables
}
